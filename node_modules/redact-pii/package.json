{
  "_args": [
    [
      {
        "raw": "redact-pii@1.3.1",
        "scope": null,
        "escapedName": "redact-pii",
        "name": "redact-pii",
        "rawSpec": "1.3.1",
        "spec": "1.3.1",
        "type": "version"
      },
      "C:\\Users\\suvo\\Desktop\\test_bot\\node_modules\\dashbot"
    ]
  ],
  "_from": "redact-pii@1.3.1",
  "_id": "redact-pii@1.3.1",
  "_inCache": true,
  "_location": "/redact-pii",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redact-pii-1.3.1.tgz_1501797371678_0.5316471203695983"
  },
  "_npmUser": {
    "name": "solvvy",
    "email": "info@solvvy.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redact-pii@1.3.1",
    "scope": null,
    "escapedName": "redact-pii",
    "name": "redact-pii",
    "rawSpec": "1.3.1",
    "spec": "1.3.1",
    "type": "version"
  },
  "_requiredBy": [
    "/dashbot"
  ],
  "_resolved": "https://registry.npmjs.org/redact-pii/-/redact-pii-1.3.1.tgz",
  "_shasum": "d71f245ac913103455c52d9c48228f217c7bc660",
  "_shrinkwrap": null,
  "_spec": "redact-pii@1.3.1",
  "_where": "C:\\Users\\suvo\\Desktop\\test_bot\\node_modules\\dashbot",
  "author": {
    "name": "Patrick Hulce",
    "email": "patrick.hulce@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/solvvy/redact-pii/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "lodash": "^4.16.6"
  },
  "description": "Remove personally identifiable information from text.",
  "devDependencies": {
    "chai": "^3.5.0",
    "cz-conventional-changelog": "^1.2.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2",
    "semantic-release": "^4.3.5",
    "sinon": "^1.17.6",
    "sinon-chai": "^2.8.0",
    "xo": "^0.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d71f245ac913103455c52d9c48228f217c7bc660",
    "tarball": "https://registry.npmjs.org/redact-pii/-/redact-pii-1.3.1.tgz"
  },
  "gitHead": "33d9ce1b9e9736aa9c47a01761428c2ee0d4e8b8",
  "homepage": "https://github.com/solvvy/redact-pii#readme",
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "solvvy",
      "email": "info@solvvy.com"
    }
  ],
  "name": "redact-pii",
  "optionalDependencies": {},
  "readme": "# redact-pii\n[![NPM Package](https://badge.fury.io/js/redact-pii.svg)](https://www.npmjs.com/package/redact-pii)\n[![Build Status](https://travis-ci.org/solvvy/redact-pii.svg?branch=master)](https://travis-ci.org/solvvy/redact-pii)\n[![Coverage Status](https://coveralls.io/repos/github/solvvy/redact-pii/badge.svg?branch=master)](https://coveralls.io/github/solvvy/redact-pii?branch=master)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![Dependencies](https://david-dm.org/solvvy/redact-pii.svg)](https://david-dm.org/solvvy/redact-pii)\n\nRemove personally identifiable information from text.\n\n## Usage\n```\nnpm install redact-pii\n```\n\n```js\nvar redactor = require('redact-pii')();\nvar redacted = redactor.redact('Hey it\\'s David Johnson with ACME Corp. Give me a call at 555-555-5555');\n// Hey it's NAME with COMPANY. Give me a call at PHONE_NUMBER\n```\n\n## API\n\n### Redactor(options)\n* `options` {Object}\n  * `replace` {String|Function} If a string, the value will be used as the replacement for all identified patterns. If a function, the function will be called with the name of each pattern to determine the replacement value for the pattern.\n  * `*` {RegExp|`false`} Any other key in options will be treated as a regular expression to use for replacing matches, `false` if no replacement is desired for a particular pattern. The following patterns are enabled by default.\n    * company\n    * credentials\n    * creditCardNumber\n    * emailAddress\n    * ipAddress\n    * name\n    * password\n    * phoneNumber\n    * salutation\n    * streetAddress\n    * username\n    * valediction\n    * zipcode\n\n### redactor.redact(text)\n* `text` {String} The text which contains PII to redact\n* *returns {String}* The text with PII redacted\n\n## Customization\n\n### Replacement Values\n```js\nvar redactor = require('redact-pii')({replace: 'TOP_SECRET'});\nredactor.redact('David Johnson lives at 42 Wallaby Way');\n// TOP_SECRET lives at TOP_SECRET\n\nvar redactor = require('redact-pii')({\n  replace: function (name, defaultReplacement) {\n    if (name === 'creditCardNumber') {\n      return value => 'XXXXXXXXXXXX' + value.slice(12);\n    } else {\n      return defaultReplacement;\n    }\n  }\n});\nredactor.redact('my CC is 1234567812345678');\n// my CC is XXXXXXXXXXXX5678\n```\n\n### Patterns\n```js\nvar redactor = require('redact-pii')({name: false});\nredactor.redact('David Johnson lives at 42 Wallaby Way');\n// David Johnson lives at STREET_ADDRESS\n\n\nvar redactor = require('redact-pii')({animal: /\\b(cat|dog|cow)s?\\b/gi});\nredactor.redact('I love cats, dogs, and cows');\n// I love ANIMAL, ANIMAL, and ANIMAL\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/solvvy/redact-pii.git"
  },
  "scripts": {
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "xo ./lib/**/*.js && mocha -s 20 --reporter spec --require test/bootstrap test/*.test.js test/**/*.test.js",
    "test:coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- --require test/bootstrap test/*.test.js test/**/*.test.js",
    "test:lint": "xo ./lib/**/*.js",
    "test:watch": "mocha --watch --reporter dot --require test/bootstrap test/*.test.js test/**/*.test.js"
  },
  "version": "1.3.1",
  "xo": {
    "env": [
      "browser",
      "node",
      "mocha"
    ],
    "space": 2,
    "rules": {
      "complexity": [
        "warn",
        10
      ],
      "xo/filename-case": 0,
      "no-else-return": 0,
      "max-statements-per-line": [
        "error",
        {
          "max": 2
        }
      ],
      "brace-style": [
        "error",
        "1tbs",
        {
          "allowSingleLine": true
        }
      ],
      "comma-dangle": [
        "error",
        "only-multiline"
      ],
      "dot-location": [
        "error",
        "object"
      ]
    }
  }
}
